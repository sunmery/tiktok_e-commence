// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: api/cart/v1/cart.proto

package cartv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCartServiceAddItem = "/api.cart.v1.CartService/AddItem"
const OperationCartServiceEmptyCart = "/api.cart.v1.CartService/EmptyCart"
const OperationCartServiceGetCart = "/api.cart.v1.CartService/GetCart"

type CartServiceHTTPServer interface {
	AddItem(context.Context, *AddItemReq) (*AddItemResp, error)
	EmptyCart(context.Context, *EmptyCartReq) (*EmptyCartResp, error)
	GetCart(context.Context, *GetCartReq) (*GetCartResp, error)
}

func RegisterCartServiceHTTPServer(s *http.Server, srv CartServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/cart", _CartService_AddItem0_HTTP_Handler(srv))
	r.GET("/v1/cart/{user_id}", _CartService_GetCart0_HTTP_Handler(srv))
	r.DELETE("/v1/cart/{user_id}", _CartService_EmptyCart0_HTTP_Handler(srv))
}

func _CartService_AddItem0_HTTP_Handler(srv CartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddItemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartServiceAddItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddItem(ctx, req.(*AddItemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddItemResp)
		return ctx.Result(200, reply)
	}
}

func _CartService_GetCart0_HTTP_Handler(srv CartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCartReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartServiceGetCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCart(ctx, req.(*GetCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCartResp)
		return ctx.Result(200, reply)
	}
}

func _CartService_EmptyCart0_HTTP_Handler(srv CartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmptyCartReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartServiceEmptyCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EmptyCart(ctx, req.(*EmptyCartReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmptyCartResp)
		return ctx.Result(200, reply)
	}
}

type CartServiceHTTPClient interface {
	AddItem(ctx context.Context, req *AddItemReq, opts ...http.CallOption) (rsp *AddItemResp, err error)
	EmptyCart(ctx context.Context, req *EmptyCartReq, opts ...http.CallOption) (rsp *EmptyCartResp, err error)
	GetCart(ctx context.Context, req *GetCartReq, opts ...http.CallOption) (rsp *GetCartResp, err error)
}

type CartServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCartServiceHTTPClient(client *http.Client) CartServiceHTTPClient {
	return &CartServiceHTTPClientImpl{client}
}

func (c *CartServiceHTTPClientImpl) AddItem(ctx context.Context, in *AddItemReq, opts ...http.CallOption) (*AddItemResp, error) {
	var out AddItemResp
	pattern := "/v1/cart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartServiceAddItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartServiceHTTPClientImpl) EmptyCart(ctx context.Context, in *EmptyCartReq, opts ...http.CallOption) (*EmptyCartResp, error) {
	var out EmptyCartResp
	pattern := "/v1/cart/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartServiceEmptyCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartServiceHTTPClientImpl) GetCart(ctx context.Context, in *GetCartReq, opts ...http.CallOption) (*GetCartResp, error) {
	var out GetCartResp
	pattern := "/v1/cart/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCartServiceGetCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
