// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package data

import (
	"context"
)

const CreateOrUpdateCartItem = `-- name: CreateOrUpdateCartItem :one
WITH cart AS (
    INSERT INTO carts (user_id)
        VALUES ($1)
        ON CONFLICT (user_id) DO NOTHING
        RETURNING id
),
     existing_cart AS (
         SELECT id FROM carts WHERE user_id = $1
     )
INSERT INTO cart_items (user_id, cart_id, product_id, quantity)
VALUES (
           $1,
           COALESCE((SELECT id FROM cart), (SELECT id FROM existing_cart)),
           $2,
           $3
       )
ON CONFLICT (cart_id, product_id) DO UPDATE
    SET quantity = cart_items.quantity + EXCLUDED.quantity
RETURNING id, user_id, cart_id, product_id, quantity, created_at, updated_at
`

type CreateOrUpdateCartItemParams struct {
	UserID    string `json:"UserID"`
	ProductID int32  `json:"ProductID"`
	Quantity  int32  `json:"Quantity"`
}

// CreateOrUpdateCartItem
//
//	WITH cart AS (
//	    INSERT INTO carts (user_id)
//	        VALUES ($1)
//	        ON CONFLICT (user_id) DO NOTHING
//	        RETURNING id
//	),
//	     existing_cart AS (
//	         SELECT id FROM carts WHERE user_id = $1
//	     )
//	INSERT INTO cart_items (user_id, cart_id, product_id, quantity)
//	VALUES (
//	           $1,
//	           COALESCE((SELECT id FROM cart), (SELECT id FROM existing_cart)),
//	           $2,
//	           $3
//	       )
//	ON CONFLICT (cart_id, product_id) DO UPDATE
//	    SET quantity = cart_items.quantity + EXCLUDED.quantity
//	RETURNING id, user_id, cart_id, product_id, quantity, created_at, updated_at
func (q *Queries) CreateOrUpdateCartItem(ctx context.Context, arg CreateOrUpdateCartItemParams) (CartItems, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateCartItem, arg.UserID, arg.ProductID, arg.Quantity)
	var i CartItems
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCart = `-- name: DeleteCart :one
DELETE
FROM carts
WHERE user_id = $1
RETURNING id, user_id, created_at, updated_at
`

// DeleteCart
//
//	DELETE
//	FROM carts
//	WHERE user_id = $1
//	RETURNING id, user_id, created_at, updated_at
func (q *Queries) DeleteCart(ctx context.Context, userID string) (Carts, error) {
	row := q.db.QueryRow(ctx, DeleteCart, userID)
	var i Carts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCartItem = `-- name: DeleteCartItem :one
DELETE
FROM cart_items
WHERE user_id = $1
  AND cart_id = $2
  AND product_id = $3
RETURNING id, user_id, cart_id, product_id, quantity, created_at, updated_at
`

type DeleteCartItemParams struct {
	UserID    string `json:"UserID"`
	CartID    int32  `json:"CartID"`
	ProductID int32  `json:"ProductID"`
}

// DeleteCartItem
//
//	DELETE
//	FROM cart_items
//	WHERE user_id = $1
//	  AND cart_id = $2
//	  AND product_id = $3
//	RETURNING id, user_id, cart_id, product_id, quantity, created_at, updated_at
func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) (CartItems, error) {
	row := q.db.QueryRow(ctx, DeleteCartItem, arg.UserID, arg.CartID, arg.ProductID)
	var i CartItems
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCart = `-- name: GetCart :many
SELECT c.user_id,
       p.name,
       p.description,
       p.price,
       p.picture,
       p.categories,
       ci.product_id,
       ci.quantity
FROM carts c
         INNER JOIN
     cart_items ci ON c.user_id = ci.user_id
         INNER JOIN
     products.products p ON ci.product_id = p.id
WHERE c.user_id = $1
ORDER BY ci.created_at
`

type GetCartRow struct {
	UserID      string   `json:"UserID"`
	Name        string   `json:"Name"`
	Description string   `json:"Description"`
	Price       float32  `json:"Price"`
	Picture     string   `json:"Picture"`
	Categories  []string `json:"Categories"`
	ProductID   int32    `json:"ProductID"`
	Quantity    int32    `json:"Quantity"`
}

// GetCart
//
//	SELECT c.user_id,
//	       p.name,
//	       p.description,
//	       p.price,
//	       p.picture,
//	       p.categories,
//	       ci.product_id,
//	       ci.quantity
//	FROM carts c
//	         INNER JOIN
//	     cart_items ci ON c.user_id = ci.user_id
//	         INNER JOIN
//	     products.products p ON ci.product_id = p.id
//	WHERE c.user_id = $1
//	ORDER BY ci.created_at
func (q *Queries) GetCart(ctx context.Context, userID *string) ([]GetCartRow, error) {
	rows, err := q.db.Query(ctx, GetCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartRow{}
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Picture,
			&i.Categories,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
