// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: credit_cards/v1/credit_cards.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditCardsService_CreateCreditCard_FullMethodName = "/api.credit_cards.v1.CreditCardsService/CreateCreditCard"
	CreditCardsService_UpdateCreditCard_FullMethodName = "/api.credit_cards.v1.CreditCardsService/UpdateCreditCard"
	CreditCardsService_DeleteCreditCard_FullMethodName = "/api.credit_cards.v1.CreditCardsService/DeleteCreditCard"
	CreditCardsService_GetCreditCards_FullMethodName   = "/api.credit_cards.v1.CreditCardsService/GetCreditCards"
	CreditCardsService_ListCreditCards_FullMethodName  = "/api.credit_cards.v1.CreditCardsService/ListCreditCards"
)

// CreditCardsServiceClient is the client API for CreditCardsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditCardsServiceClient interface {
	CreateCreditCard(ctx context.Context, in *CreditCards, opts ...grpc.CallOption) (*CardsReply, error)
	UpdateCreditCard(ctx context.Context, in *UpdateCreditCardsRequest, opts ...grpc.CallOption) (*CardsReply, error)
	DeleteCreditCard(ctx context.Context, in *DeleteCreditCardsRequest, opts ...grpc.CallOption) (*CardsReply, error)
	GetCreditCards(ctx context.Context, in *GetCreditCardsRequest, opts ...grpc.CallOption) (*GetCreditCardsReply, error)
	ListCreditCards(ctx context.Context, in *ListCreditCardsRequest, opts ...grpc.CallOption) (*ListCreditCardsReply, error)
}

type creditCardsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditCardsServiceClient(cc grpc.ClientConnInterface) CreditCardsServiceClient {
	return &creditCardsServiceClient{cc}
}

func (c *creditCardsServiceClient) CreateCreditCard(ctx context.Context, in *CreditCards, opts ...grpc.CallOption) (*CardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardsReply)
	err := c.cc.Invoke(ctx, CreditCardsService_CreateCreditCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditCardsServiceClient) UpdateCreditCard(ctx context.Context, in *UpdateCreditCardsRequest, opts ...grpc.CallOption) (*CardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardsReply)
	err := c.cc.Invoke(ctx, CreditCardsService_UpdateCreditCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditCardsServiceClient) DeleteCreditCard(ctx context.Context, in *DeleteCreditCardsRequest, opts ...grpc.CallOption) (*CardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardsReply)
	err := c.cc.Invoke(ctx, CreditCardsService_DeleteCreditCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditCardsServiceClient) GetCreditCards(ctx context.Context, in *GetCreditCardsRequest, opts ...grpc.CallOption) (*GetCreditCardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreditCardsReply)
	err := c.cc.Invoke(ctx, CreditCardsService_GetCreditCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditCardsServiceClient) ListCreditCards(ctx context.Context, in *ListCreditCardsRequest, opts ...grpc.CallOption) (*ListCreditCardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCreditCardsReply)
	err := c.cc.Invoke(ctx, CreditCardsService_ListCreditCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditCardsServiceServer is the server API for CreditCardsService service.
// All implementations must embed UnimplementedCreditCardsServiceServer
// for forward compatibility.
type CreditCardsServiceServer interface {
	CreateCreditCard(context.Context, *CreditCards) (*CardsReply, error)
	UpdateCreditCard(context.Context, *UpdateCreditCardsRequest) (*CardsReply, error)
	DeleteCreditCard(context.Context, *DeleteCreditCardsRequest) (*CardsReply, error)
	GetCreditCards(context.Context, *GetCreditCardsRequest) (*GetCreditCardsReply, error)
	ListCreditCards(context.Context, *ListCreditCardsRequest) (*ListCreditCardsReply, error)
	mustEmbedUnimplementedCreditCardsServiceServer()
}

// UnimplementedCreditCardsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditCardsServiceServer struct{}

func (UnimplementedCreditCardsServiceServer) CreateCreditCard(context.Context, *CreditCards) (*CardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditCard not implemented")
}
func (UnimplementedCreditCardsServiceServer) UpdateCreditCard(context.Context, *UpdateCreditCardsRequest) (*CardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreditCard not implemented")
}
func (UnimplementedCreditCardsServiceServer) DeleteCreditCard(context.Context, *DeleteCreditCardsRequest) (*CardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCreditCard not implemented")
}
func (UnimplementedCreditCardsServiceServer) GetCreditCards(context.Context, *GetCreditCardsRequest) (*GetCreditCardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditCards not implemented")
}
func (UnimplementedCreditCardsServiceServer) ListCreditCards(context.Context, *ListCreditCardsRequest) (*ListCreditCardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditCards not implemented")
}
func (UnimplementedCreditCardsServiceServer) mustEmbedUnimplementedCreditCardsServiceServer() {}
func (UnimplementedCreditCardsServiceServer) testEmbeddedByValue()                            {}

// UnsafeCreditCardsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditCardsServiceServer will
// result in compilation errors.
type UnsafeCreditCardsServiceServer interface {
	mustEmbedUnimplementedCreditCardsServiceServer()
}

func RegisterCreditCardsServiceServer(s grpc.ServiceRegistrar, srv CreditCardsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditCardsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditCardsService_ServiceDesc, srv)
}

func _CreditCardsService_CreateCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditCards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditCardsServiceServer).CreateCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditCardsService_CreateCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditCardsServiceServer).CreateCreditCard(ctx, req.(*CreditCards))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditCardsService_UpdateCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreditCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditCardsServiceServer).UpdateCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditCardsService_UpdateCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditCardsServiceServer).UpdateCreditCard(ctx, req.(*UpdateCreditCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditCardsService_DeleteCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCreditCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditCardsServiceServer).DeleteCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditCardsService_DeleteCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditCardsServiceServer).DeleteCreditCard(ctx, req.(*DeleteCreditCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditCardsService_GetCreditCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditCardsServiceServer).GetCreditCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditCardsService_GetCreditCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditCardsServiceServer).GetCreditCards(ctx, req.(*GetCreditCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditCardsService_ListCreditCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditCardsServiceServer).ListCreditCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditCardsService_ListCreditCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditCardsServiceServer).ListCreditCards(ctx, req.(*ListCreditCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditCardsService_ServiceDesc is the grpc.ServiceDesc for CreditCardsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditCardsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.credit_cards.v1.CreditCardsService",
	HandlerType: (*CreditCardsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCreditCard",
			Handler:    _CreditCardsService_CreateCreditCard_Handler,
		},
		{
			MethodName: "UpdateCreditCard",
			Handler:    _CreditCardsService_UpdateCreditCard_Handler,
		},
		{
			MethodName: "DeleteCreditCard",
			Handler:    _CreditCardsService_DeleteCreditCard_Handler,
		},
		{
			MethodName: "GetCreditCards",
			Handler:    _CreditCardsService_GetCreditCards_Handler,
		},
		{
			MethodName: "ListCreditCards",
			Handler:    _CreditCardsService_ListCreditCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit_cards/v1/credit_cards.proto",
}
