// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: credit_cards.sql

package modules

import (
	"context"
)

const CreateCreditCard = `-- name: CreateCreditCard :one
INSERT INTO credit_cards.credit_cards(owner,
                                      username,
                                      credit_card_number,
                                      credit_card_cvv,
                                      credit_card_expiration_year,
                                      credit_card_expiration_month)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
`

type CreateCreditCardParams struct {
	Owner                     string `json:"owner"`
	Username                  string `json:"username"`
	CreditCardNumber          string `json:"creditCardNumber"`
	CreditCardCvv             int32  `json:"creditCardCvv"`
	CreditCardExpirationYear  int32  `json:"creditCardExpirationYear"`
	CreditCardExpirationMonth int32  `json:"creditCardExpirationMonth"`
}

// CreateCreditCard
//
//	INSERT INTO credit_cards.credit_cards(owner,
//	                                      username,
//	                                      credit_card_number,
//	                                      credit_card_cvv,
//	                                      credit_card_expiration_year,
//	                                      credit_card_expiration_month)
//	VALUES ($1, $2, $3, $4, $5, $6)
//	RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
func (q *Queries) CreateCreditCard(ctx context.Context, arg CreateCreditCardParams) (CreditCardsCreditCards, error) {
	row := q.db.QueryRow(ctx, CreateCreditCard,
		arg.Owner,
		arg.Username,
		arg.CreditCardNumber,
		arg.CreditCardCvv,
		arg.CreditCardExpirationYear,
		arg.CreditCardExpirationMonth,
	)
	var i CreditCardsCreditCards
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Username,
		&i.CreditCardNumber,
		&i.CreditCardCvv,
		&i.CreditCardExpirationYear,
		&i.CreditCardExpirationMonth,
	)
	return i, err
}

const DeleteCreditCard = `-- name: DeleteCreditCard :one
DELETE
FROM credit_cards.credit_cards
WHERE username = $1
  AND id = $2
RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
`

type DeleteCreditCardParams struct {
	Username string `json:"username"`
	ID       int32  `json:"id"`
}

// DeleteCreditCard
//
//	DELETE
//	FROM credit_cards.credit_cards
//	WHERE username = $1
//	  AND id = $2
//	RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
func (q *Queries) DeleteCreditCard(ctx context.Context, arg DeleteCreditCardParams) (CreditCardsCreditCards, error) {
	row := q.db.QueryRow(ctx, DeleteCreditCard, arg.Username, arg.ID)
	var i CreditCardsCreditCards
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Username,
		&i.CreditCardNumber,
		&i.CreditCardCvv,
		&i.CreditCardExpirationYear,
		&i.CreditCardExpirationMonth,
	)
	return i, err
}

const GetCreditCards = `-- name: GetCreditCards :many
SELECT id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
FROM credit_cards.credit_cards
WHERE credit_card_number ILIKE '%' || $1 || '%'
`

// GetCreditCards
//
//	SELECT id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
//	FROM credit_cards.credit_cards
//	WHERE credit_card_number ILIKE '%' || $1 || '%'
func (q *Queries) GetCreditCards(ctx context.Context, dollar_1 *string) ([]CreditCardsCreditCards, error) {
	rows, err := q.db.Query(ctx, GetCreditCards, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CreditCardsCreditCards{}
	for rows.Next() {
		var i CreditCardsCreditCards
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Username,
			&i.CreditCardNumber,
			&i.CreditCardCvv,
			&i.CreditCardExpirationYear,
			&i.CreditCardExpirationMonth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCreditCards = `-- name: ListCreditCards :many
SELECT id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
FROM credit_cards.credit_cards
WHERE username = $1
`

// ListCreditCards
//
//	SELECT id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
//	FROM credit_cards.credit_cards
//	WHERE username = $1
func (q *Queries) ListCreditCards(ctx context.Context, username string) ([]CreditCardsCreditCards, error) {
	rows, err := q.db.Query(ctx, ListCreditCards, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CreditCardsCreditCards{}
	for rows.Next() {
		var i CreditCardsCreditCards
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Username,
			&i.CreditCardNumber,
			&i.CreditCardCvv,
			&i.CreditCardExpirationYear,
			&i.CreditCardExpirationMonth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCreditCard = `-- name: UpdateCreditCard :one
UPDATE credit_cards.credit_cards
SET credit_card_number           = coalesce($1, credit_card_number),
    credit_card_cvv              = coalesce($2, credit_card_cvv),
    credit_card_expiration_year  = coalesce($3, credit_card_expiration_year),
    credit_card_expiration_month = coalesce($4, credit_card_expiration_month)
WHERE username = $5
RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
`

type UpdateCreditCardParams struct {
	CreditCardNumber          *string `json:"creditCardNumber"`
	CreditCardCvv             *int32  `json:"creditCardCvv"`
	CreditCardExpirationYear  *int32  `json:"creditCardExpirationYear"`
	CreditCardExpirationMonth *int32  `json:"creditCardExpirationMonth"`
	Username                  string  `json:"username"`
}

// UpdateCreditCard
//
//	UPDATE credit_cards.credit_cards
//	SET credit_card_number           = coalesce($1, credit_card_number),
//	    credit_card_cvv              = coalesce($2, credit_card_cvv),
//	    credit_card_expiration_year  = coalesce($3, credit_card_expiration_year),
//	    credit_card_expiration_month = coalesce($4, credit_card_expiration_month)
//	WHERE username = $5
//	RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
func (q *Queries) UpdateCreditCard(ctx context.Context, arg UpdateCreditCardParams) (CreditCardsCreditCards, error) {
	row := q.db.QueryRow(ctx, UpdateCreditCard,
		arg.CreditCardNumber,
		arg.CreditCardCvv,
		arg.CreditCardExpirationYear,
		arg.CreditCardExpirationMonth,
		arg.Username,
	)
	var i CreditCardsCreditCards
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Username,
		&i.CreditCardNumber,
		&i.CreditCardCvv,
		&i.CreditCardExpirationYear,
		&i.CreditCardExpirationMonth,
	)
	return i, err
}
