// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: product/v1/service_product.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductCatalogServiceCreateProduct = "/api.product.v1.ProductCatalogService/CreateProduct"
const OperationProductCatalogServiceGetProduct = "/api.product.v1.ProductCatalogService/GetProduct"
const OperationProductCatalogServiceListProducts = "/api.product.v1.ProductCatalogService/ListProducts"
const OperationProductCatalogServiceSearchProducts = "/api.product.v1.ProductCatalogService/SearchProducts"
const OperationProductCatalogServiceUpdateProduct = "/api.product.v1.ProductCatalogService/UpdateProduct"

type ProductCatalogServiceHTTPServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*ProductReply, error)
	GetProduct(context.Context, *GetProductReq) (*ProductReply, error)
	ListProducts(context.Context, *ListProductsReq) (*ListProductsResp, error)
	SearchProducts(context.Context, *SearchProductsReq) (*SearchProductsResp, error)
	UpdateProduct(context.Context, *Product) (*ProductReply, error)
}

func RegisterProductCatalogServiceHTTPServer(s *http.Server, srv ProductCatalogServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/products", _ProductCatalogService_CreateProduct0_HTTP_Handler(srv))
	r.PATCH("/v1/products", _ProductCatalogService_UpdateProduct0_HTTP_Handler(srv))
	r.GET("/v1/products", _ProductCatalogService_ListProducts0_HTTP_Handler(srv))
	r.GET("/v1/products/{id}", _ProductCatalogService_GetProduct0_HTTP_Handler(srv))
	r.GET("/v1/products/search/{query}", _ProductCatalogService_SearchProducts0_HTTP_Handler(srv))
}

func _ProductCatalogService_CreateProduct0_HTTP_Handler(srv ProductCatalogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProductRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCatalogServiceCreateProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProduct(ctx, req.(*CreateProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductReply)
		return ctx.Result(200, reply)
	}
}

func _ProductCatalogService_UpdateProduct0_HTTP_Handler(srv ProductCatalogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Product
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCatalogServiceUpdateProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProduct(ctx, req.(*Product))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductReply)
		return ctx.Result(200, reply)
	}
}

func _ProductCatalogService_ListProducts0_HTTP_Handler(srv ProductCatalogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCatalogServiceListProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProducts(ctx, req.(*ListProductsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProductsResp)
		return ctx.Result(200, reply)
	}
}

func _ProductCatalogService_GetProduct0_HTTP_Handler(srv ProductCatalogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCatalogServiceGetProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProduct(ctx, req.(*GetProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProductReply)
		return ctx.Result(200, reply)
	}
}

func _ProductCatalogService_SearchProducts0_HTTP_Handler(srv ProductCatalogServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchProductsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductCatalogServiceSearchProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchProducts(ctx, req.(*SearchProductsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchProductsResp)
		return ctx.Result(200, reply)
	}
}

type ProductCatalogServiceHTTPClient interface {
	CreateProduct(ctx context.Context, req *CreateProductRequest, opts ...http.CallOption) (rsp *ProductReply, err error)
	GetProduct(ctx context.Context, req *GetProductReq, opts ...http.CallOption) (rsp *ProductReply, err error)
	ListProducts(ctx context.Context, req *ListProductsReq, opts ...http.CallOption) (rsp *ListProductsResp, err error)
	SearchProducts(ctx context.Context, req *SearchProductsReq, opts ...http.CallOption) (rsp *SearchProductsResp, err error)
	UpdateProduct(ctx context.Context, req *Product, opts ...http.CallOption) (rsp *ProductReply, err error)
}

type ProductCatalogServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProductCatalogServiceHTTPClient(client *http.Client) ProductCatalogServiceHTTPClient {
	return &ProductCatalogServiceHTTPClientImpl{client}
}

func (c *ProductCatalogServiceHTTPClientImpl) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...http.CallOption) (*ProductReply, error) {
	var out ProductReply
	pattern := "/v1/products"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCatalogServiceCreateProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductCatalogServiceHTTPClientImpl) GetProduct(ctx context.Context, in *GetProductReq, opts ...http.CallOption) (*ProductReply, error) {
	var out ProductReply
	pattern := "/v1/products/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductCatalogServiceGetProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductCatalogServiceHTTPClientImpl) ListProducts(ctx context.Context, in *ListProductsReq, opts ...http.CallOption) (*ListProductsResp, error) {
	var out ListProductsResp
	pattern := "/v1/products"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductCatalogServiceListProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductCatalogServiceHTTPClientImpl) SearchProducts(ctx context.Context, in *SearchProductsReq, opts ...http.CallOption) (*SearchProductsResp, error) {
	var out SearchProductsResp
	pattern := "/v1/products/search/{query}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductCatalogServiceSearchProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductCatalogServiceHTTPClientImpl) UpdateProduct(ctx context.Context, in *Product, opts ...http.CallOption) (*ProductReply, error) {
	var out ProductReply
	pattern := "/v1/products"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductCatalogServiceUpdateProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
