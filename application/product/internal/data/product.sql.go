// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package data

import (
	"context"
)

const CreateProduct = `-- name: CreateProduct :one
INSERT INTO products(name, description, picture, price, categories)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, picture, price, categories
`

type CreateProductParams struct {
	Name        string   `json:"Name"`
	Description string   `json:"Description"`
	Picture     string   `json:"Picture"`
	Price       float32  `json:"Price"`
	Categories  []string `json:"Categories"`
}

// CreateProduct
//
//	INSERT INTO products(name, description, picture, price, categories)
//	VALUES ($1, $2, $3, $4, $5)
//	RETURNING id, name, description, picture, price, categories
func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Products, error) {
	row := q.db.QueryRow(ctx, CreateProduct,
		arg.Name,
		arg.Description,
		arg.Picture,
		arg.Price,
		arg.Categories,
	)
	var i Products
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Picture,
		&i.Price,
		&i.Categories,
	)
	return i, err
}

const ListProducts = `-- name: ListProducts :many
SELECT id,
       name,
       description,
       picture,
       price,
       categories
FROM products
WHERE $1 = ANY (categories)
ORDER BY id
OFFSET $2 LIMIT $3
`

type ListProductsParams struct {
	CategoryName *string `json:"CategoryName"`
	Page         int64   `json:"Page"`
	PageSize     int64   `json:"PageSize"`
}

// ListProducts
//
//	SELECT id,
//	       name,
//	       description,
//	       picture,
//	       price,
//	       categories
//	FROM products
//	WHERE $1 = ANY (categories)
//	ORDER BY id
//	OFFSET $2 LIMIT $3
func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Products, error) {
	rows, err := q.db.Query(ctx, ListProducts, arg.CategoryName, arg.Page, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Products{}
	for rows.Next() {
		var i Products
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Picture,
			&i.Price,
			&i.Categories,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
