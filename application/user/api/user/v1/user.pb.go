// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: user/v1/user.proto

// 用户rpc

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SigninRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SigninRequest) Reset() {
	*x = SigninRequest{}
	mi := &file_user_v1_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigninRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigninRequest) ProtoMessage() {}

func (x *SigninRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigninRequest.ProtoReflect.Descriptor instead.
func (*SigninRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *SigninRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SigninRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type SigninReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SigninReply) Reset() {
	*x = SigninReply{}
	mi := &file_user_v1_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigninReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigninReply) ProtoMessage() {}

func (x *SigninReply) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigninReply.ProtoReflect.Descriptor instead.
func (*SigninReply) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *SigninReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SigninReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization string `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
}

func (x *GetUserInfoRequest) Reset() {
	*x = GetUserInfoRequest{}
	mi := &file_user_v1_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRequest) ProtoMessage() {}

func (x *GetUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserInfoRequest) GetAuthorization() string {
	if x != nil {
		return x.Authorization
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner               string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedTime         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime         string                 `protobuf:"bytes,5,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	Id                  string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId          string                 `protobuf:"bytes,7,opt,name=externalId,proto3" json:"externalId,omitempty"`
	Type                string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Password            string                 `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	PasswordSalt        string                 `protobuf:"bytes,10,opt,name=passwordSalt,proto3" json:"passwordSalt,omitempty"`
	PasswordType        string                 `protobuf:"bytes,11,opt,name=passwordType,proto3" json:"passwordType,omitempty"`
	DisplayName         string                 `protobuf:"bytes,12,opt,name=displayName,proto3" json:"displayName,omitempty"`
	FirstName           string                 `protobuf:"bytes,13,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName            string                 `protobuf:"bytes,14,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Avatar              string                 `protobuf:"bytes,15,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AvatarType          string                 `protobuf:"bytes,16,opt,name=avatarType,proto3" json:"avatarType,omitempty"`
	PermanentAvatar     string                 `protobuf:"bytes,17,opt,name=permanentAvatar,proto3" json:"permanentAvatar,omitempty"`
	Email               string                 `protobuf:"bytes,18,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified       bool                   `protobuf:"varint,19,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	Phone               string                 `protobuf:"bytes,20,opt,name=phone,proto3" json:"phone,omitempty"`
	CountryCode         string                 `protobuf:"bytes,21,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Region              string                 `protobuf:"bytes,22,opt,name=region,proto3" json:"region,omitempty"`
	Location            string                 `protobuf:"bytes,23,opt,name=location,proto3" json:"location,omitempty"`
	Address             []string               `protobuf:"bytes,24,rep,name=address,proto3" json:"address,omitempty"`
	Affiliation         string                 `protobuf:"bytes,25,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
	Title               string                 `protobuf:"bytes,26,opt,name=title,proto3" json:"title,omitempty"`
	IdCardType          string                 `protobuf:"bytes,27,opt,name=idCardType,proto3" json:"idCardType,omitempty"`
	IdCard              string                 `protobuf:"bytes,28,opt,name=idCard,proto3" json:"idCard,omitempty"`
	Homepage            string                 `protobuf:"bytes,29,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Bio                 string                 `protobuf:"bytes,30,opt,name=bio,proto3" json:"bio,omitempty"`
	Tag                 string                 `protobuf:"bytes,31,opt,name=tag,proto3" json:"tag,omitempty"`
	Language            string                 `protobuf:"bytes,32,opt,name=language,proto3" json:"language,omitempty"`
	Gender              string                 `protobuf:"bytes,33,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthday            string                 `protobuf:"bytes,34,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Education           string                 `protobuf:"bytes,35,opt,name=education,proto3" json:"education,omitempty"`
	Score               uint32                 `protobuf:"varint,36,opt,name=score,proto3" json:"score,omitempty"`
	Karma               uint32                 `protobuf:"varint,37,opt,name=karma,proto3" json:"karma,omitempty"`
	Ranking             uint32                 `protobuf:"varint,38,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Balance             uint32                 `protobuf:"varint,39,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency            string                 `protobuf:"bytes,40,opt,name=currency,proto3" json:"currency,omitempty"`
	IsDefaultAvatar     bool                   `protobuf:"varint,41,opt,name=isDefaultAvatar,proto3" json:"isDefaultAvatar,omitempty"`
	IsOnline            bool                   `protobuf:"varint,42,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	IsAdmin             bool                   `protobuf:"varint,43,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	IsForbidden         bool                   `protobuf:"varint,44,opt,name=isForbidden,proto3" json:"isForbidden,omitempty"`
	IsDeleted           bool                   `protobuf:"varint,45,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	SignupApplication   string                 `protobuf:"bytes,46,opt,name=signupApplication,proto3" json:"signupApplication,omitempty"`
	Hash                string                 `protobuf:"bytes,47,opt,name=hash,proto3" json:"hash,omitempty"`
	PreHash             string                 `protobuf:"bytes,48,opt,name=preHash,proto3" json:"preHash,omitempty"`
	AccessKey           string                 `protobuf:"bytes,49,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	AccessSecret        string                 `protobuf:"bytes,50,opt,name=accessSecret,proto3" json:"accessSecret,omitempty"`
	AccessToken         string                 `protobuf:"bytes,51,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	CreatedIp           string                 `protobuf:"bytes,52,opt,name=createdIp,proto3" json:"createdIp,omitempty"`
	LastSigninTime      string                 `protobuf:"bytes,53,opt,name=lastSigninTime,proto3" json:"lastSigninTime,omitempty"`
	LastSigninIp        string                 `protobuf:"bytes,54,opt,name=lastSigninIp,proto3" json:"lastSigninIp,omitempty"`
	Github              string                 `protobuf:"bytes,55,opt,name=github,proto3" json:"github,omitempty"`
	Google              string                 `protobuf:"bytes,56,opt,name=google,proto3" json:"google,omitempty"`
	Qq                  string                 `protobuf:"bytes,57,opt,name=qq,proto3" json:"qq,omitempty"`
	Wechat              string                 `protobuf:"bytes,58,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Facebook            string                 `protobuf:"bytes,59,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Dingtalk            string                 `protobuf:"bytes,60,opt,name=dingtalk,proto3" json:"dingtalk,omitempty"`
	Weibo               string                 `protobuf:"bytes,61,opt,name=weibo,proto3" json:"weibo,omitempty"`
	Gitee               string                 `protobuf:"bytes,62,opt,name=gitee,proto3" json:"gitee,omitempty"`
	Linkedin            string                 `protobuf:"bytes,63,opt,name=linkedin,proto3" json:"linkedin,omitempty"`
	Wecom               string                 `protobuf:"bytes,64,opt,name=wecom,proto3" json:"wecom,omitempty"`
	Lark                string                 `protobuf:"bytes,65,opt,name=lark,proto3" json:"lark,omitempty"`
	Gitlab              string                 `protobuf:"bytes,66,opt,name=gitlab,proto3" json:"gitlab,omitempty"`
	Adfs                string                 `protobuf:"bytes,67,opt,name=adfs,proto3" json:"adfs,omitempty"`
	Baidu               string                 `protobuf:"bytes,68,opt,name=baidu,proto3" json:"baidu,omitempty"`
	Alipay              string                 `protobuf:"bytes,69,opt,name=alipay,proto3" json:"alipay,omitempty"`
	Casdoor             string                 `protobuf:"bytes,70,opt,name=casdoor,proto3" json:"casdoor,omitempty"`
	Infoflow            string                 `protobuf:"bytes,71,opt,name=infoflow,proto3" json:"infoflow,omitempty"`
	Apple               string                 `protobuf:"bytes,72,opt,name=apple,proto3" json:"apple,omitempty"`
	Azuread             string                 `protobuf:"bytes,73,opt,name=azuread,proto3" json:"azuread,omitempty"`
	Azureadb2C          string                 `protobuf:"bytes,74,opt,name=azureadb2c,proto3" json:"azureadb2c,omitempty"`
	Slack               string                 `protobuf:"bytes,75,opt,name=slack,proto3" json:"slack,omitempty"`
	Steam               string                 `protobuf:"bytes,76,opt,name=steam,proto3" json:"steam,omitempty"`
	Bilibili            string                 `protobuf:"bytes,77,opt,name=bilibili,proto3" json:"bilibili,omitempty"`
	Okta                string                 `protobuf:"bytes,78,opt,name=okta,proto3" json:"okta,omitempty"`
	Douyin              string                 `protobuf:"bytes,79,opt,name=douyin,proto3" json:"douyin,omitempty"`
	Line                string                 `protobuf:"bytes,80,opt,name=line,proto3" json:"line,omitempty"`
	Amazon              string                 `protobuf:"bytes,81,opt,name=amazon,proto3" json:"amazon,omitempty"`
	Auth0               string                 `protobuf:"bytes,82,opt,name=auth0,proto3" json:"auth0,omitempty"`
	Battlenet           string                 `protobuf:"bytes,83,opt,name=battlenet,proto3" json:"battlenet,omitempty"`
	Bitbucket           string                 `protobuf:"bytes,84,opt,name=bitbucket,proto3" json:"bitbucket,omitempty"`
	Box                 string                 `protobuf:"bytes,85,opt,name=box,proto3" json:"box,omitempty"`
	Cloudfoundry        string                 `protobuf:"bytes,86,opt,name=cloudfoundry,proto3" json:"cloudfoundry,omitempty"`
	Dailymotion         string                 `protobuf:"bytes,87,opt,name=dailymotion,proto3" json:"dailymotion,omitempty"`
	Deezer              string                 `protobuf:"bytes,88,opt,name=deezer,proto3" json:"deezer,omitempty"`
	Digitalocean        string                 `protobuf:"bytes,89,opt,name=digitalocean,proto3" json:"digitalocean,omitempty"`
	Discord             string                 `protobuf:"bytes,90,opt,name=discord,proto3" json:"discord,omitempty"`
	Dropbox             string                 `protobuf:"bytes,91,opt,name=dropbox,proto3" json:"dropbox,omitempty"`
	Eveonline           string                 `protobuf:"bytes,92,opt,name=eveonline,proto3" json:"eveonline,omitempty"`
	Fitbit              string                 `protobuf:"bytes,93,opt,name=fitbit,proto3" json:"fitbit,omitempty"`
	Gitea               string                 `protobuf:"bytes,94,opt,name=gitea,proto3" json:"gitea,omitempty"`
	Heroku              string                 `protobuf:"bytes,95,opt,name=heroku,proto3" json:"heroku,omitempty"`
	Influxcloud         string                 `protobuf:"bytes,96,opt,name=influxcloud,proto3" json:"influxcloud,omitempty"`
	Instagram           string                 `protobuf:"bytes,97,opt,name=instagram,proto3" json:"instagram,omitempty"`
	Intercom            string                 `protobuf:"bytes,98,opt,name=intercom,proto3" json:"intercom,omitempty"`
	Kakao               string                 `protobuf:"bytes,99,opt,name=kakao,proto3" json:"kakao,omitempty"`
	Lastfm              string                 `protobuf:"bytes,100,opt,name=lastfm,proto3" json:"lastfm,omitempty"`
	Mailru              string                 `protobuf:"bytes,101,opt,name=mailru,proto3" json:"mailru,omitempty"`
	Meetup              string                 `protobuf:"bytes,102,opt,name=meetup,proto3" json:"meetup,omitempty"`
	Microsoftonline     string                 `protobuf:"bytes,103,opt,name=microsoftonline,proto3" json:"microsoftonline,omitempty"`
	Naver               string                 `protobuf:"bytes,104,opt,name=naver,proto3" json:"naver,omitempty"`
	Nextcloud           string                 `protobuf:"bytes,105,opt,name=nextcloud,proto3" json:"nextcloud,omitempty"`
	Onedrive            string                 `protobuf:"bytes,106,opt,name=onedrive,proto3" json:"onedrive,omitempty"`
	Oura                string                 `protobuf:"bytes,107,opt,name=oura,proto3" json:"oura,omitempty"`
	Patreon             string                 `protobuf:"bytes,108,opt,name=patreon,proto3" json:"patreon,omitempty"`
	Paypal              string                 `protobuf:"bytes,109,opt,name=paypal,proto3" json:"paypal,omitempty"`
	Salesforce          string                 `protobuf:"bytes,110,opt,name=salesforce,proto3" json:"salesforce,omitempty"`
	Shopify             string                 `protobuf:"bytes,111,opt,name=shopify,proto3" json:"shopify,omitempty"`
	Soundcloud          string                 `protobuf:"bytes,112,opt,name=soundcloud,proto3" json:"soundcloud,omitempty"`
	Spotify             string                 `protobuf:"bytes,113,opt,name=spotify,proto3" json:"spotify,omitempty"`
	Strava              string                 `protobuf:"bytes,114,opt,name=strava,proto3" json:"strava,omitempty"`
	Stripe              string                 `protobuf:"bytes,115,opt,name=stripe,proto3" json:"stripe,omitempty"`
	Tiktok              string                 `protobuf:"bytes,116,opt,name=tiktok,proto3" json:"tiktok,omitempty"`
	Tumblr              string                 `protobuf:"bytes,117,opt,name=tumblr,proto3" json:"tumblr,omitempty"`
	Twitch              string                 `protobuf:"bytes,118,opt,name=twitch,proto3" json:"twitch,omitempty"`
	Twitter             string                 `protobuf:"bytes,119,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Typetalk            string                 `protobuf:"bytes,120,opt,name=typetalk,proto3" json:"typetalk,omitempty"`
	Uber                string                 `protobuf:"bytes,121,opt,name=uber,proto3" json:"uber,omitempty"`
	Vk                  string                 `protobuf:"bytes,122,opt,name=vk,proto3" json:"vk,omitempty"`
	Wepay               string                 `protobuf:"bytes,123,opt,name=wepay,proto3" json:"wepay,omitempty"`
	Xero                string                 `protobuf:"bytes,124,opt,name=xero,proto3" json:"xero,omitempty"`
	Yahoo               string                 `protobuf:"bytes,125,opt,name=yahoo,proto3" json:"yahoo,omitempty"`
	Yammer              string                 `protobuf:"bytes,126,opt,name=yammer,proto3" json:"yammer,omitempty"`
	Yandex              string                 `protobuf:"bytes,127,opt,name=yandex,proto3" json:"yandex,omitempty"`
	Zoom                string                 `protobuf:"bytes,128,opt,name=zoom,proto3" json:"zoom,omitempty"`
	Metamask            string                 `protobuf:"bytes,129,opt,name=metamask,proto3" json:"metamask,omitempty"`
	Web3Onboard         string                 `protobuf:"bytes,130,opt,name=web3onboard,proto3" json:"web3onboard,omitempty"`
	Custom              string                 `protobuf:"bytes,131,opt,name=custom,proto3" json:"custom,omitempty"`
	WebauthnCredentials *anypb.Any             `protobuf:"bytes,132,opt,name=webauthnCredentials,proto3" json:"webauthnCredentials,omitempty"`
	PreferredMfaType    string                 `protobuf:"bytes,133,opt,name=preferredMfaType,proto3" json:"preferredMfaType,omitempty"`
	RecoveryCodes       *anypb.Any             `protobuf:"bytes,134,opt,name=recoveryCodes,proto3" json:"recoveryCodes,omitempty"`
	TotpSecret          string                 `protobuf:"bytes,135,opt,name=totpSecret,proto3" json:"totpSecret,omitempty"`
	MfaPhoneEnabled     bool                   `protobuf:"varint,136,opt,name=mfaPhoneEnabled,proto3" json:"mfaPhoneEnabled,omitempty"`
	MfaEmailEnabled     bool                   `protobuf:"varint,137,opt,name=mfaEmailEnabled,proto3" json:"mfaEmailEnabled,omitempty"`
	Invitation          string                 `protobuf:"bytes,138,opt,name=invitation,proto3" json:"invitation,omitempty"`
	InvitationCode      string                 `protobuf:"bytes,139,opt,name=invitationCode,proto3" json:"invitationCode,omitempty"`
	FaceIds             *anypb.Any             `protobuf:"bytes,140,opt,name=faceIds,proto3" json:"faceIds,omitempty"`
	Ldap                string                 `protobuf:"bytes,141,opt,name=ldap,proto3" json:"ldap,omitempty"`
	Properties          *Data_Properties       `protobuf:"bytes,142,opt,name=properties,proto3" json:"properties,omitempty"`
	Roles               *anypb.Any             `protobuf:"bytes,143,opt,name=roles,proto3" json:"roles,omitempty"`
	Permissions         *anypb.Any             `protobuf:"bytes,144,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Groups              *anypb.Any             `protobuf:"bytes,145,opt,name=groups,proto3" json:"groups,omitempty"`
	LastSigninWrongTime string                 `protobuf:"bytes,146,opt,name=lastSigninWrongTime,proto3" json:"lastSigninWrongTime,omitempty"`
	SigninWrongTimes    uint32                 `protobuf:"varint,147,opt,name=signinWrongTimes,proto3" json:"signinWrongTimes,omitempty"`
	ManagedAccounts     *anypb.Any             `protobuf:"bytes,148,opt,name=managedAccounts,proto3" json:"managedAccounts,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_user_v1_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Data) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Data) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

func (x *Data) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Data) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Data) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data) GetPasswordSalt() string {
	if x != nil {
		return x.PasswordSalt
	}
	return ""
}

func (x *Data) GetPasswordType() string {
	if x != nil {
		return x.PasswordType
	}
	return ""
}

func (x *Data) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Data) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Data) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Data) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Data) GetAvatarType() string {
	if x != nil {
		return x.AvatarType
	}
	return ""
}

func (x *Data) GetPermanentAvatar() string {
	if x != nil {
		return x.PermanentAvatar
	}
	return ""
}

func (x *Data) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Data) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *Data) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Data) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Data) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Data) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Data) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Data) GetAffiliation() string {
	if x != nil {
		return x.Affiliation
	}
	return ""
}

func (x *Data) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Data) GetIdCardType() string {
	if x != nil {
		return x.IdCardType
	}
	return ""
}

func (x *Data) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *Data) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *Data) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *Data) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Data) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Data) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Data) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *Data) GetEducation() string {
	if x != nil {
		return x.Education
	}
	return ""
}

func (x *Data) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Data) GetKarma() uint32 {
	if x != nil {
		return x.Karma
	}
	return 0
}

func (x *Data) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *Data) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Data) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Data) GetIsDefaultAvatar() bool {
	if x != nil {
		return x.IsDefaultAvatar
	}
	return false
}

func (x *Data) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *Data) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *Data) GetIsForbidden() bool {
	if x != nil {
		return x.IsForbidden
	}
	return false
}

func (x *Data) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Data) GetSignupApplication() string {
	if x != nil {
		return x.SignupApplication
	}
	return ""
}

func (x *Data) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Data) GetPreHash() string {
	if x != nil {
		return x.PreHash
	}
	return ""
}

func (x *Data) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Data) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *Data) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Data) GetCreatedIp() string {
	if x != nil {
		return x.CreatedIp
	}
	return ""
}

func (x *Data) GetLastSigninTime() string {
	if x != nil {
		return x.LastSigninTime
	}
	return ""
}

func (x *Data) GetLastSigninIp() string {
	if x != nil {
		return x.LastSigninIp
	}
	return ""
}

func (x *Data) GetGithub() string {
	if x != nil {
		return x.Github
	}
	return ""
}

func (x *Data) GetGoogle() string {
	if x != nil {
		return x.Google
	}
	return ""
}

func (x *Data) GetQq() string {
	if x != nil {
		return x.Qq
	}
	return ""
}

func (x *Data) GetWechat() string {
	if x != nil {
		return x.Wechat
	}
	return ""
}

func (x *Data) GetFacebook() string {
	if x != nil {
		return x.Facebook
	}
	return ""
}

func (x *Data) GetDingtalk() string {
	if x != nil {
		return x.Dingtalk
	}
	return ""
}

func (x *Data) GetWeibo() string {
	if x != nil {
		return x.Weibo
	}
	return ""
}

func (x *Data) GetGitee() string {
	if x != nil {
		return x.Gitee
	}
	return ""
}

func (x *Data) GetLinkedin() string {
	if x != nil {
		return x.Linkedin
	}
	return ""
}

func (x *Data) GetWecom() string {
	if x != nil {
		return x.Wecom
	}
	return ""
}

func (x *Data) GetLark() string {
	if x != nil {
		return x.Lark
	}
	return ""
}

func (x *Data) GetGitlab() string {
	if x != nil {
		return x.Gitlab
	}
	return ""
}

func (x *Data) GetAdfs() string {
	if x != nil {
		return x.Adfs
	}
	return ""
}

func (x *Data) GetBaidu() string {
	if x != nil {
		return x.Baidu
	}
	return ""
}

func (x *Data) GetAlipay() string {
	if x != nil {
		return x.Alipay
	}
	return ""
}

func (x *Data) GetCasdoor() string {
	if x != nil {
		return x.Casdoor
	}
	return ""
}

func (x *Data) GetInfoflow() string {
	if x != nil {
		return x.Infoflow
	}
	return ""
}

func (x *Data) GetApple() string {
	if x != nil {
		return x.Apple
	}
	return ""
}

func (x *Data) GetAzuread() string {
	if x != nil {
		return x.Azuread
	}
	return ""
}

func (x *Data) GetAzureadb2C() string {
	if x != nil {
		return x.Azureadb2C
	}
	return ""
}

func (x *Data) GetSlack() string {
	if x != nil {
		return x.Slack
	}
	return ""
}

func (x *Data) GetSteam() string {
	if x != nil {
		return x.Steam
	}
	return ""
}

func (x *Data) GetBilibili() string {
	if x != nil {
		return x.Bilibili
	}
	return ""
}

func (x *Data) GetOkta() string {
	if x != nil {
		return x.Okta
	}
	return ""
}

func (x *Data) GetDouyin() string {
	if x != nil {
		return x.Douyin
	}
	return ""
}

func (x *Data) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *Data) GetAmazon() string {
	if x != nil {
		return x.Amazon
	}
	return ""
}

func (x *Data) GetAuth0() string {
	if x != nil {
		return x.Auth0
	}
	return ""
}

func (x *Data) GetBattlenet() string {
	if x != nil {
		return x.Battlenet
	}
	return ""
}

func (x *Data) GetBitbucket() string {
	if x != nil {
		return x.Bitbucket
	}
	return ""
}

func (x *Data) GetBox() string {
	if x != nil {
		return x.Box
	}
	return ""
}

func (x *Data) GetCloudfoundry() string {
	if x != nil {
		return x.Cloudfoundry
	}
	return ""
}

func (x *Data) GetDailymotion() string {
	if x != nil {
		return x.Dailymotion
	}
	return ""
}

func (x *Data) GetDeezer() string {
	if x != nil {
		return x.Deezer
	}
	return ""
}

func (x *Data) GetDigitalocean() string {
	if x != nil {
		return x.Digitalocean
	}
	return ""
}

func (x *Data) GetDiscord() string {
	if x != nil {
		return x.Discord
	}
	return ""
}

func (x *Data) GetDropbox() string {
	if x != nil {
		return x.Dropbox
	}
	return ""
}

func (x *Data) GetEveonline() string {
	if x != nil {
		return x.Eveonline
	}
	return ""
}

func (x *Data) GetFitbit() string {
	if x != nil {
		return x.Fitbit
	}
	return ""
}

func (x *Data) GetGitea() string {
	if x != nil {
		return x.Gitea
	}
	return ""
}

func (x *Data) GetHeroku() string {
	if x != nil {
		return x.Heroku
	}
	return ""
}

func (x *Data) GetInfluxcloud() string {
	if x != nil {
		return x.Influxcloud
	}
	return ""
}

func (x *Data) GetInstagram() string {
	if x != nil {
		return x.Instagram
	}
	return ""
}

func (x *Data) GetIntercom() string {
	if x != nil {
		return x.Intercom
	}
	return ""
}

func (x *Data) GetKakao() string {
	if x != nil {
		return x.Kakao
	}
	return ""
}

func (x *Data) GetLastfm() string {
	if x != nil {
		return x.Lastfm
	}
	return ""
}

func (x *Data) GetMailru() string {
	if x != nil {
		return x.Mailru
	}
	return ""
}

func (x *Data) GetMeetup() string {
	if x != nil {
		return x.Meetup
	}
	return ""
}

func (x *Data) GetMicrosoftonline() string {
	if x != nil {
		return x.Microsoftonline
	}
	return ""
}

func (x *Data) GetNaver() string {
	if x != nil {
		return x.Naver
	}
	return ""
}

func (x *Data) GetNextcloud() string {
	if x != nil {
		return x.Nextcloud
	}
	return ""
}

func (x *Data) GetOnedrive() string {
	if x != nil {
		return x.Onedrive
	}
	return ""
}

func (x *Data) GetOura() string {
	if x != nil {
		return x.Oura
	}
	return ""
}

func (x *Data) GetPatreon() string {
	if x != nil {
		return x.Patreon
	}
	return ""
}

func (x *Data) GetPaypal() string {
	if x != nil {
		return x.Paypal
	}
	return ""
}

func (x *Data) GetSalesforce() string {
	if x != nil {
		return x.Salesforce
	}
	return ""
}

func (x *Data) GetShopify() string {
	if x != nil {
		return x.Shopify
	}
	return ""
}

func (x *Data) GetSoundcloud() string {
	if x != nil {
		return x.Soundcloud
	}
	return ""
}

func (x *Data) GetSpotify() string {
	if x != nil {
		return x.Spotify
	}
	return ""
}

func (x *Data) GetStrava() string {
	if x != nil {
		return x.Strava
	}
	return ""
}

func (x *Data) GetStripe() string {
	if x != nil {
		return x.Stripe
	}
	return ""
}

func (x *Data) GetTiktok() string {
	if x != nil {
		return x.Tiktok
	}
	return ""
}

func (x *Data) GetTumblr() string {
	if x != nil {
		return x.Tumblr
	}
	return ""
}

func (x *Data) GetTwitch() string {
	if x != nil {
		return x.Twitch
	}
	return ""
}

func (x *Data) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

func (x *Data) GetTypetalk() string {
	if x != nil {
		return x.Typetalk
	}
	return ""
}

func (x *Data) GetUber() string {
	if x != nil {
		return x.Uber
	}
	return ""
}

func (x *Data) GetVk() string {
	if x != nil {
		return x.Vk
	}
	return ""
}

func (x *Data) GetWepay() string {
	if x != nil {
		return x.Wepay
	}
	return ""
}

func (x *Data) GetXero() string {
	if x != nil {
		return x.Xero
	}
	return ""
}

func (x *Data) GetYahoo() string {
	if x != nil {
		return x.Yahoo
	}
	return ""
}

func (x *Data) GetYammer() string {
	if x != nil {
		return x.Yammer
	}
	return ""
}

func (x *Data) GetYandex() string {
	if x != nil {
		return x.Yandex
	}
	return ""
}

func (x *Data) GetZoom() string {
	if x != nil {
		return x.Zoom
	}
	return ""
}

func (x *Data) GetMetamask() string {
	if x != nil {
		return x.Metamask
	}
	return ""
}

func (x *Data) GetWeb3Onboard() string {
	if x != nil {
		return x.Web3Onboard
	}
	return ""
}

func (x *Data) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

func (x *Data) GetWebauthnCredentials() *anypb.Any {
	if x != nil {
		return x.WebauthnCredentials
	}
	return nil
}

func (x *Data) GetPreferredMfaType() string {
	if x != nil {
		return x.PreferredMfaType
	}
	return ""
}

func (x *Data) GetRecoveryCodes() *anypb.Any {
	if x != nil {
		return x.RecoveryCodes
	}
	return nil
}

func (x *Data) GetTotpSecret() string {
	if x != nil {
		return x.TotpSecret
	}
	return ""
}

func (x *Data) GetMfaPhoneEnabled() bool {
	if x != nil {
		return x.MfaPhoneEnabled
	}
	return false
}

func (x *Data) GetMfaEmailEnabled() bool {
	if x != nil {
		return x.MfaEmailEnabled
	}
	return false
}

func (x *Data) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

func (x *Data) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *Data) GetFaceIds() *anypb.Any {
	if x != nil {
		return x.FaceIds
	}
	return nil
}

func (x *Data) GetLdap() string {
	if x != nil {
		return x.Ldap
	}
	return ""
}

func (x *Data) GetProperties() *Data_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Data) GetRoles() *anypb.Any {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Data) GetPermissions() *anypb.Any {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Data) GetGroups() *anypb.Any {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Data) GetLastSigninWrongTime() string {
	if x != nil {
		return x.LastSigninWrongTime
	}
	return ""
}

func (x *Data) GetSigninWrongTimes() uint32 {
	if x != nil {
		return x.SigninWrongTimes
	}
	return 0
}

func (x *Data) GetManagedAccounts() *anypb.Any {
	if x != nil {
		return x.ManagedAccounts
	}
	return nil
}

type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Data  *Data  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	mi := &file_user_v1_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserInfoResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetUserInfoResponse) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Data_Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No                      string `protobuf:"bytes,1,opt,name=no,proto3" json:"no,omitempty"`
	Oauth_GoogleAvatarUrl   string `protobuf:"bytes,2,opt,name=oauth_Google_avatarUrl,json=oauthGoogleAvatarUrl,proto3" json:"oauth_Google_avatarUrl,omitempty"`
	Oauth_GoogleDisplayName string `protobuf:"bytes,3,opt,name=oauth_Google_displayName,json=oauthGoogleDisplayName,proto3" json:"oauth_Google_displayName,omitempty"`
	Oauth_GoogleEmail       string `protobuf:"bytes,4,opt,name=oauth_Google_email,json=oauthGoogleEmail,proto3" json:"oauth_Google_email,omitempty"`
	Oauth_GoogleId          string `protobuf:"bytes,5,opt,name=oauth_Google_id,json=oauthGoogleId,proto3" json:"oauth_Google_id,omitempty"`
	Oauth_GoogleUsername    string `protobuf:"bytes,6,opt,name=oauth_Google_username,json=oauthGoogleUsername,proto3" json:"oauth_Google_username,omitempty"`
}

func (x *Data_Properties) Reset() {
	*x = Data_Properties{}
	mi := &file_user_v1_user_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Properties) ProtoMessage() {}

func (x *Data_Properties) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Properties.ProtoReflect.Descriptor instead.
func (*Data_Properties) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Data_Properties) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *Data_Properties) GetOauth_GoogleAvatarUrl() string {
	if x != nil {
		return x.Oauth_GoogleAvatarUrl
	}
	return ""
}

func (x *Data_Properties) GetOauth_GoogleDisplayName() string {
	if x != nil {
		return x.Oauth_GoogleDisplayName
	}
	return ""
}

func (x *Data_Properties) GetOauth_GoogleEmail() string {
	if x != nil {
		return x.Oauth_GoogleEmail
	}
	return ""
}

func (x *Data_Properties) GetOauth_GoogleId() string {
	if x != nil {
		return x.Oauth_GoogleId
	}
	return ""
}

func (x *Data_Properties) GetOauth_GoogleUsername() string {
	if x != nil {
		return x.Oauth_GoogleUsername
	}
	return ""
}

var File_user_v1_user_proto protoreflect.FileDescriptor

var file_user_v1_user_proto_rawDesc = []byte{
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x0d, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x24, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x61, 0x6c, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62,
	0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x61, 0x72, 0x6d,
	0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x61, 0x72, 0x6d, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x49, 0x70, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x71, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62,
	0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x69, 0x74, 0x65, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x69, 0x74, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x72, 0x6b, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x66, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x66, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x69, 0x64, 0x75, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x69, 0x64, 0x75, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x64, 0x6f, 0x6f, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x73, 0x64, 0x6f, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x61, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x61, 0x64, 0x62, 0x32, 0x63, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x61, 0x64, 0x62, 0x32, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c,
	0x61, 0x63, 0x6b, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6b, 0x74, 0x61, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x6b, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75,
	0x74, 0x68, 0x30, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x30,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x74, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x6f, 0x78, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x18, 0x56,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x65, 0x7a, 0x65, 0x72, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x65, 0x7a, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72,
	0x6f, 0x70, 0x62, 0x6f, 0x78, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x62, 0x6f, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x74, 0x62, 0x69, 0x74, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x74, 0x62, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x69,
	0x74, 0x65, 0x61, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x69, 0x74, 0x65, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x6b, 0x75, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x6b, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x78, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x61, 0x6b, 0x61, 0x6f, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x61, 0x6b, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x66, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74,
	0x66, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x72, 0x75, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x72, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x65, 0x74, 0x75, 0x70, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x65, 0x74,
	0x75, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x76, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x76,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x75, 0x72, 0x61, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x75, 0x72, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x72, 0x65, 0x6f, 0x6e, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x72, 0x65, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x79, 0x70, 0x61, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x70,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x66, 0x79, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x66, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61,
	0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x75, 0x6d, 0x62, 0x6c, 0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x75, 0x6d, 0x62, 0x6c, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x62, 0x65, 0x72, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6b, 0x18, 0x7a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x70, 0x61,
	0x79, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x65, 0x70, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x78, 0x65, 0x72, 0x6f, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x65,
	0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x61, 0x6d, 0x6d,
	0x65, 0x72, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x79, 0x61, 0x6d, 0x6d, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x1b, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0b, 0x77, 0x65,
	0x62, 0x33, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x65, 0x62, 0x33, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x47, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74,
	0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x13, 0x77, 0x65, 0x62, 0x61,
	0x75, 0x74, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x2b, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x66, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x66, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x6d, 0x66,
	0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x88, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x66, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x6d, 0x66, 0x61, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6d, 0x66, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8a,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x13, 0x0a, 0x04, 0x6c,
	0x64, 0x61, 0x70, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x64, 0x61, 0x70,
	0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x57, 0x72,
	0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x93, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x96, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6e, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xce, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x50, 0x01, 0x5a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_user_v1_user_proto_rawDescOnce sync.Once
	file_user_v1_user_proto_rawDescData = file_user_v1_user_proto_rawDesc
)

func file_user_v1_user_proto_rawDescGZIP() []byte {
	file_user_v1_user_proto_rawDescOnce.Do(func() {
		file_user_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_v1_user_proto_rawDescData)
	})
	return file_user_v1_user_proto_rawDescData
}

var file_user_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_user_v1_user_proto_goTypes = []any{
	(*SigninRequest)(nil),         // 0: api.user.v1.SigninRequest
	(*SigninReply)(nil),           // 1: api.user.v1.SigninReply
	(*GetUserInfoRequest)(nil),    // 2: api.user.v1.GetUserInfoRequest
	(*Data)(nil),                  // 3: api.user.v1.Data
	(*GetUserInfoResponse)(nil),   // 4: api.user.v1.GetUserInfoResponse
	(*Data_Properties)(nil),       // 5: api.user.v1.Data.Properties
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 7: google.protobuf.Any
}
var file_user_v1_user_proto_depIdxs = []int32{
	6,  // 0: api.user.v1.Data.createdTime:type_name -> google.protobuf.Timestamp
	6,  // 1: api.user.v1.Data.updatedTime:type_name -> google.protobuf.Timestamp
	7,  // 2: api.user.v1.Data.webauthnCredentials:type_name -> google.protobuf.Any
	7,  // 3: api.user.v1.Data.recoveryCodes:type_name -> google.protobuf.Any
	7,  // 4: api.user.v1.Data.faceIds:type_name -> google.protobuf.Any
	5,  // 5: api.user.v1.Data.properties:type_name -> api.user.v1.Data.Properties
	7,  // 6: api.user.v1.Data.roles:type_name -> google.protobuf.Any
	7,  // 7: api.user.v1.Data.permissions:type_name -> google.protobuf.Any
	7,  // 8: api.user.v1.Data.groups:type_name -> google.protobuf.Any
	7,  // 9: api.user.v1.Data.managedAccounts:type_name -> google.protobuf.Any
	3,  // 10: api.user.v1.GetUserInfoResponse.data:type_name -> api.user.v1.Data
	0,  // 11: api.user.v1.UserService.Signin:input_type -> api.user.v1.SigninRequest
	2,  // 12: api.user.v1.UserService.GetUserInfo:input_type -> api.user.v1.GetUserInfoRequest
	1,  // 13: api.user.v1.UserService.Signin:output_type -> api.user.v1.SigninReply
	4,  // 14: api.user.v1.UserService.GetUserInfo:output_type -> api.user.v1.GetUserInfoResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_user_v1_user_proto_init() }
func file_user_v1_user_proto_init() {
	if File_user_v1_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_v1_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_v1_user_proto_goTypes,
		DependencyIndexes: file_user_v1_user_proto_depIdxs,
		MessageInfos:      file_user_v1_user_proto_msgTypes,
	}.Build()
	File_user_v1_user_proto = out.File
	file_user_v1_user_proto_rawDesc = nil
	file_user_v1_user_proto_goTypes = nil
	file_user_v1_user_proto_depIdxs = nil
}
