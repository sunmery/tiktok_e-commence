// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: addresses.sql

package modules

import (
	"context"
)

const CreatUserAddress = `-- name: CreatUserAddress :one
INSERT INTO addresses.addresses(user_id, street_address, city, state, country, zip_code)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, street_address, city, state, country, zip_code
`

type CreatUserAddressParams struct {
	UserID        string `json:"UserID"`
	StreetAddress string `json:"StreetAddress"`
	City          string `json:"City"`
	State         string `json:"State"`
	Country       string `json:"Country"`
	ZipCode       int32  `json:"ZipCode"`
}

// CreatUserAddress
//
//	INSERT INTO addresses.addresses(user_id, street_address, city, state, country, zip_code)
//	VALUES ($1, $2, $3, $4, $5, $6)
//	RETURNING id, user_id, street_address, city, state, country, zip_code
func (q *Queries) CreatUserAddress(ctx context.Context, arg CreatUserAddressParams) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, CreatUserAddress,
		arg.UserID,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
	)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}

const DeleteUserAddress = `-- name: DeleteUserAddress :one
DELETE
FROM addresses.addresses
WHERE user_id = $1
  AND id = $2
RETURNING id, user_id, street_address, city, state, country, zip_code
`

type DeleteUserAddressParams struct {
	UserID string `json:"UserID"`
	ID     int32  `json:"ID"`
}

// DeleteUserAddress
//
//	DELETE
//	FROM addresses.addresses
//	WHERE user_id = $1
//	  AND id = $2
//	RETURNING id, user_id, street_address, city, state, country, zip_code
func (q *Queries) DeleteUserAddress(ctx context.Context, arg DeleteUserAddressParams) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, DeleteUserAddress, arg.UserID, arg.ID)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}

const DeleteUserAddresses = `-- name: DeleteUserAddresses :one
DELETE
FROM addresses.addresses
WHERE user_id = $1
RETURNING id, user_id, street_address, city, state, country, zip_code
`

// DeleteUserAddresses
//
//	DELETE
//	FROM addresses.addresses
//	WHERE user_id = $1
//	RETURNING id, user_id, street_address, city, state, country, zip_code
func (q *Queries) DeleteUserAddresses(ctx context.Context, userID string) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, DeleteUserAddresses, userID)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}

const GetUserAddress = `-- name: GetUserAddress :one
SELECT id, user_id, street_address, city, state, country, zip_code
FROM addresses.addresses
WHERE user_id = $1
LIMIT 1
`

// GetUserAddress
//
//	SELECT id, user_id, street_address, city, state, country, zip_code
//	FROM addresses.addresses
//	WHERE user_id = $1
//	LIMIT 1
func (q *Queries) GetUserAddress(ctx context.Context, userID string) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, GetUserAddress, userID)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}

const ListUserAddresses = `-- name: ListUserAddresses :many
SELECT id, user_id, street_address, city, state, country, zip_code
FROM addresses.addresses
WHERE user_id = $1
`

// ListUserAddresses
//
//	SELECT id, user_id, street_address, city, state, country, zip_code
//	FROM addresses.addresses
//	WHERE user_id = $1
func (q *Queries) ListUserAddresses(ctx context.Context, userID string) ([]AddressesAddresses, error) {
	rows, err := q.db.Query(ctx, ListUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AddressesAddresses{}
	for rows.Next() {
		var i AddressesAddresses
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUserAddress = `-- name: UpdateUserAddress :one
UPDATE addresses.addresses
SET street_address = coalesce($1, street_address),
    city           = coalesce($2, city),
    state          = coalesce($3, state),
    country        = coalesce($4, country),
    zip_code       = coalesce($5, zip_code)
WHERE user_id = $6
RETURNING id, user_id, street_address, city, state, country, zip_code
`

type UpdateUserAddressParams struct {
	StreetAddress *string `json:"StreetAddress"`
	City          *string `json:"City"`
	State         *string `json:"State"`
	Country       *string `json:"Country"`
	ZipCode       *int32  `json:"ZipCode"`
	UserID        string  `json:"UserID"`
}

// UpdateUserAddress
//
//	UPDATE addresses.addresses
//	SET street_address = coalesce($1, street_address),
//	    city           = coalesce($2, city),
//	    state          = coalesce($3, state),
//	    country        = coalesce($4, country),
//	    zip_code       = coalesce($5, zip_code)
//	WHERE user_id = $6
//	RETURNING id, user_id, street_address, city, state, country, zip_code
func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, UpdateUserAddress,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.UserID,
	)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}
