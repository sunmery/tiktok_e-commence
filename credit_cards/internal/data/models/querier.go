// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package models

import (
	"context"
)

type Querier interface {
	//CreateCreditCard
	//
	//  INSERT INTO credit_cards.credit_cards(owner,
	//                                        username,
	//                                        credit_card_number,
	//                                        credit_card_cvv,
	//                                        credit_card_expiration_year,
	//                                        credit_card_expiration_month)
	//  VALUES ($1, $2, $3, $4, $5, $6)
	//  RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
	CreateCreditCard(ctx context.Context, arg CreateCreditCardParams) (CreditCardsCreditCards, error)
	//DeleteCreditCard
	//
	//  DELETE
	//  FROM credit_cards.credit_cards
	//  WHERE username = $1
	//    AND id = $2
	//  RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
	DeleteCreditCard(ctx context.Context, arg DeleteCreditCardParams) (CreditCardsCreditCards, error)
	//GetCreditCards
	//
	//  SELECT id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
	//  FROM credit_cards.credit_cards
	//  WHERE owner = $1
	//    AND username = $2
	//    AND credit_card_number ILIKE '%' || $3 || '%'
	GetCreditCards(ctx context.Context, arg GetCreditCardsParams) ([]CreditCardsCreditCards, error)
	//ListCreditCards
	//
	//  SELECT id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
	//  FROM credit_cards.credit_cards
	//  WHERE owner = $1
	//    AND username = $2
	ListCreditCards(ctx context.Context, arg ListCreditCardsParams) ([]CreditCardsCreditCards, error)
	//UpdateCreditCard
	//
	//  UPDATE credit_cards.credit_cards
	//  SET credit_card_number           = coalesce($1, credit_card_number),
	//      credit_card_cvv              = coalesce($2, credit_card_cvv),
	//      credit_card_expiration_year  = coalesce($3, credit_card_expiration_year),
	//      credit_card_expiration_month = coalesce($4, credit_card_expiration_month)
	//  WHERE username = $5
	//  RETURNING id, owner, username, credit_card_number, credit_card_cvv, credit_card_expiration_year, credit_card_expiration_month
	UpdateCreditCard(ctx context.Context, arg UpdateCreditCardParams) (CreditCardsCreditCards, error)
}

var _ Querier = (*Queries)(nil)
