// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: addresses.sql

package models

import (
	"context"
)

const CreatAddress = `-- name: CreatAddress :one
INSERT INTO addresses.addresses(owner, name, street_address, city, state, country, zip_code)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, owner, name, street_address, city, state, country, zip_code
`

type CreatAddressParams struct {
	Owner         string `json:"owner"`
	Name          string `json:"name"`
	StreetAddress string `json:"street_address"`
	City          string `json:"city"`
	State         string `json:"state"`
	Country       string `json:"country"`
	ZipCode       string `json:"zip_code"`
}

// CreatAddress
//
//	INSERT INTO addresses.addresses(owner, name, street_address, city, state, country, zip_code)
//	VALUES ($1, $2, $3, $4, $5, $6, $7)
//	RETURNING id, owner, name, street_address, city, state, country, zip_code
func (q *Queries) CreatAddress(ctx context.Context, arg CreatAddressParams) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, CreatAddress,
		arg.Owner,
		arg.Name,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
	)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}

const DeleteAddress = `-- name: DeleteAddress :one
DELETE
FROM addresses.addresses
WHERE id = $1
  AND owner = $2
  AND name = $3
RETURNING id, owner, name, street_address, city, state, country, zip_code
`

type DeleteAddressParams struct {
	ID    int32  `json:"id"`
	Owner string `json:"owner"`
	Name  string `json:"name"`
}

// DeleteAddress
//
//	DELETE
//	FROM addresses.addresses
//	WHERE id = $1
//	  AND owner = $2
//	  AND name = $3
//	RETURNING id, owner, name, street_address, city, state, country, zip_code
func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, DeleteAddress, arg.ID, arg.Owner, arg.Name)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}

const GetAddresses = `-- name: GetAddresses :many
SELECT id, owner, name, street_address, city, state, country, zip_code
FROM addresses.addresses
WHERE owner = $1
  AND name = $2
`

type GetAddressesParams struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
}

// GetAddresses
//
//	SELECT id, owner, name, street_address, city, state, country, zip_code
//	FROM addresses.addresses
//	WHERE owner = $1
//	  AND name = $2
func (q *Queries) GetAddresses(ctx context.Context, arg GetAddressesParams) ([]AddressesAddresses, error) {
	rows, err := q.db.Query(ctx, GetAddresses, arg.Owner, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AddressesAddresses
	for rows.Next() {
		var i AddressesAddresses
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateAddress = `-- name: UpdateAddress :one
UPDATE addresses.addresses
SET street_address = coalesce($1, street_address),
    city           = coalesce($2, city),
    state          = coalesce($3, state),
    country        = coalesce($4, country),
    zip_code       = coalesce($5, zip_code)
WHERE id = $6
  AND owner = $7
  AND name = $8
RETURNING id, owner, name, street_address, city, state, country, zip_code
`

type UpdateAddressParams struct {
	StreetAddress *string `json:"street_address"`
	City          *string `json:"city"`
	State         *string `json:"state"`
	Country       *string `json:"country"`
	ZipCode       *string `json:"zip_code"`
	ID            int32   `json:"id"`
	Owner         string  `json:"owner"`
	Name          string  `json:"name"`
}

// UpdateAddress
//
//	UPDATE addresses.addresses
//	SET street_address = coalesce($1, street_address),
//	    city           = coalesce($2, city),
//	    state          = coalesce($3, state),
//	    country        = coalesce($4, country),
//	    zip_code       = coalesce($5, zip_code)
//	WHERE id = $6
//	  AND owner = $7
//	  AND name = $8
//	RETURNING id, owner, name, street_address, city, state, country, zip_code
func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (AddressesAddresses, error) {
	row := q.db.QueryRow(ctx, UpdateAddress,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.ID,
		arg.Owner,
		arg.Name,
	)
	var i AddressesAddresses
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Country,
		&i.ZipCode,
	)
	return i, err
}
