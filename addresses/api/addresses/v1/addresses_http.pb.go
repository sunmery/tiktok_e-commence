// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: addresses/v1/addresses.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAddressesServiceCreateAddresses = "/api.addresses.v1.AddressesService/CreateAddresses"
const OperationAddressesServiceDeleteAddresses = "/api.addresses.v1.AddressesService/DeleteAddresses"
const OperationAddressesServiceGetAddresses = "/api.addresses.v1.AddressesService/GetAddresses"
const OperationAddressesServiceUpdateAddresses = "/api.addresses.v1.AddressesService/UpdateAddresses"

type AddressesServiceHTTPServer interface {
	CreateAddresses(context.Context, *Address) (*Address, error)
	DeleteAddresses(context.Context, *DeleteAddressesRequest) (*DeleteAddressesReply, error)
	GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesReply, error)
	UpdateAddresses(context.Context, *Address) (*Address, error)
}

func RegisterAddressesServiceHTTPServer(s *http.Server, srv AddressesServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/addresses", _AddressesService_CreateAddresses0_HTTP_Handler(srv))
	r.PATCH("/v1/addresses", _AddressesService_UpdateAddresses0_HTTP_Handler(srv))
	r.DELETE("/v1/addresses", _AddressesService_DeleteAddresses0_HTTP_Handler(srv))
	r.GET("/v1/addresses", _AddressesService_GetAddresses0_HTTP_Handler(srv))
}

func _AddressesService_CreateAddresses0_HTTP_Handler(srv AddressesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Address
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesServiceCreateAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddresses(ctx, req.(*Address))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Address)
		return ctx.Result(200, reply)
	}
}

func _AddressesService_UpdateAddresses0_HTTP_Handler(srv AddressesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Address
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesServiceUpdateAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAddresses(ctx, req.(*Address))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Address)
		return ctx.Result(200, reply)
	}
}

func _AddressesService_DeleteAddresses0_HTTP_Handler(srv AddressesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAddressesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesServiceDeleteAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAddresses(ctx, req.(*DeleteAddressesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAddressesReply)
		return ctx.Result(200, reply)
	}
}

func _AddressesService_GetAddresses0_HTTP_Handler(srv AddressesServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressesServiceGetAddresses)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddresses(ctx, req.(*GetAddressesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAddressesReply)
		return ctx.Result(200, reply)
	}
}

type AddressesServiceHTTPClient interface {
	CreateAddresses(ctx context.Context, req *Address, opts ...http.CallOption) (rsp *Address, err error)
	DeleteAddresses(ctx context.Context, req *DeleteAddressesRequest, opts ...http.CallOption) (rsp *DeleteAddressesReply, err error)
	GetAddresses(ctx context.Context, req *GetAddressesRequest, opts ...http.CallOption) (rsp *GetAddressesReply, err error)
	UpdateAddresses(ctx context.Context, req *Address, opts ...http.CallOption) (rsp *Address, err error)
}

type AddressesServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAddressesServiceHTTPClient(client *http.Client) AddressesServiceHTTPClient {
	return &AddressesServiceHTTPClientImpl{client}
}

func (c *AddressesServiceHTTPClientImpl) CreateAddresses(ctx context.Context, in *Address, opts ...http.CallOption) (*Address, error) {
	var out Address
	pattern := "/v1/addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAddressesServiceCreateAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressesServiceHTTPClientImpl) DeleteAddresses(ctx context.Context, in *DeleteAddressesRequest, opts ...http.CallOption) (*DeleteAddressesReply, error) {
	var out DeleteAddressesReply
	pattern := "/v1/addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressesServiceDeleteAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressesServiceHTTPClientImpl) GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...http.CallOption) (*GetAddressesReply, error) {
	var out GetAddressesReply
	pattern := "/v1/addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressesServiceGetAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressesServiceHTTPClientImpl) UpdateAddresses(ctx context.Context, in *Address, opts ...http.CallOption) (*Address, error) {
	var out Address
	pattern := "/v1/addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAddressesServiceUpdateAddresses))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
