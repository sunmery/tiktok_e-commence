name: Deploy Microservices

on:
  workflow_run:
    workflows: ["Build Microservices"]
    types:
      - completed

jobs:

  create-secrets:
    runs-on: ubuntu-24.04
    steps:
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl{,.sha256}"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          chmod +x ./kubectl
          cp ./kubectl /usr/local/bin

      - name: Write Kubernetes config file
        run: |
          mkdir -pv ~/.kube/
          echo "${{secrets.KUBE_CONF}}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Set Context
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 15
          max_attempts: 3
          retry_on: error
          command: |
            if kubectl get ns $BACKEND_NAMESPACE; then
            echo "namespaces $BACKEND_NAMESPACE already exists, skip create"
            else
            kubectl create ns $BACKEND_NAMESPACE
            fi

            kubectl config set-context --current --namespace $BACKEND_NAMESPACE

      - name: Create secret
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 15
          max_attempts: 3
          retry_on: error
          command: |
            kubectl delete secret db-source-secret --ignore-not-found
            kubectl delete secret redis-address-secret --ignore-not-found
            kubectl delete secret redis-username-secret --ignore-not-found
            kubectl delete secret redis-password-secret --ignore-not-found

            kubectl create secret generic db-source-secret --from-literal='DB_SOURCE=${{ secrets.DB_SOURCE }}'
            kubectl create secret generic redis-address-secret --from-literal='REDIS_ADDRESS=${{ secrets.REDIS_ADDRESS }}'
            kubectl create secret generic redis-username-secret --from-literal='REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}'
            kubectl create secret generic redis-password-secret --from-literal='REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}'
  

  backend-deploy:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        service: [addresses, balances, cart, checkout, credit_cards, order, payment, product, user]  # 并行执行多个服务
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -LO https://github.com/argoproj/argo-cd/releases/download/v2.13.3/argocd-linux-amd64
          mv argocd-linux-amd64 argocd
          chmod +x ./argocd
          cp ./argocd /usr/local/bin

      - name: Connect to ArgoCD Server
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER_ADDR }} \
            --username ${{ secrets.ARGOCD_SERVER_USER }} \
            --password ${{ secrets.ARGOCD_SERVER_PASS }} \
            --insecure
          argocd version

      - name: Connect to Kubernetes Cluster
        run: |
          mkdir -pv ~/.kube/
          echo "${{secrets.KUBE_CONF}}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Set Kubernetes Context
        run: |
          if kubectl get ns $BACKEND_NAMESPACE; then
            echo "Namespace $BACKEND_NAMESPACE already exists, skipping creation."
          else
            kubectl create ns $BACKEND_NAMESPACE
          fi
          kubectl config set-context --current --namespace $BACKEND_NAMESPACE

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ${{ matrix.service_config.service }}/application.yaml
          
          argocd app set argocd/${REGISTER_NAMESPACE}-${{ matrix.service_config.service }} \
            --kustomize-image example=${{ secrets.REGISTRY }}/${REGISTER_NAMESPACE}/${{ matrix.service_config.service }}:$VERSION
          
          argocd app sync ${REGISTER_NAMESPACE}-${{ matrix.service_config.service }}

      - name: Monitor Deployment
        run: |
          kubectl rollout status deploy/${{ matrix.service_config.service }} || kubectl rollout undo deploy/${{ matrix.service_config.service }}
