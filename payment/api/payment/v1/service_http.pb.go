// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: payment/v1/service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPaymentServiceCharge = "/api.payment.v1.PaymentService/Charge"

type PaymentServiceHTTPServer interface {
	Charge(context.Context, *ChargeReq) (*ChargeResp, error)
}

func RegisterPaymentServiceHTTPServer(s *http.Server, srv PaymentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/payment", _PaymentService_Charge0_HTTP_Handler(srv))
}

func _PaymentService_Charge0_HTTP_Handler(srv PaymentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChargeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentServiceCharge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Charge(ctx, req.(*ChargeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChargeResp)
		return ctx.Result(200, reply)
	}
}

type PaymentServiceHTTPClient interface {
	Charge(ctx context.Context, req *ChargeReq, opts ...http.CallOption) (rsp *ChargeResp, err error)
}

type PaymentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPaymentServiceHTTPClient(client *http.Client) PaymentServiceHTTPClient {
	return &PaymentServiceHTTPClientImpl{client}
}

func (c *PaymentServiceHTTPClientImpl) Charge(ctx context.Context, in *ChargeReq, opts ...http.CallOption) (*ChargeResp, error) {
	var out ChargeResp
	pattern := "/v1/payment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentServiceCharge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
