// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: balance/v1/balance.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBalanceCreateBalance = "/api.balance.v1.Balance/CreateBalance"
const OperationBalanceGetBalance = "/api.balance.v1.Balance/GetBalance"
const OperationBalanceUpdateBalance = "/api.balance.v1.Balance/UpdateBalance"

type BalanceHTTPServer interface {
	CreateBalance(context.Context, *BalanceRequest) (*BalanceReply, error)
	GetBalance(context.Context, *GetBalanceRequest) (*BalanceReply, error)
	UpdateBalance(context.Context, *BalanceRequest) (*BalanceReply, error)
}

func RegisterBalanceHTTPServer(s *http.Server, srv BalanceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/balance", _Balance_CreateBalance0_HTTP_Handler(srv))
	r.PATCH("/v1/balance", _Balance_UpdateBalance0_HTTP_Handler(srv))
	r.GET("/v1/balance", _Balance_GetBalance0_HTTP_Handler(srv))
}

func _Balance_CreateBalance0_HTTP_Handler(srv BalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BalanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBalanceCreateBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBalance(ctx, req.(*BalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BalanceReply)
		return ctx.Result(200, reply)
	}
}

func _Balance_UpdateBalance0_HTTP_Handler(srv BalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BalanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBalanceUpdateBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBalance(ctx, req.(*BalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BalanceReply)
		return ctx.Result(200, reply)
	}
}

func _Balance_GetBalance0_HTTP_Handler(srv BalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBalanceGetBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBalance(ctx, req.(*GetBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BalanceReply)
		return ctx.Result(200, reply)
	}
}

type BalanceHTTPClient interface {
	CreateBalance(ctx context.Context, req *BalanceRequest, opts ...http.CallOption) (rsp *BalanceReply, err error)
	GetBalance(ctx context.Context, req *GetBalanceRequest, opts ...http.CallOption) (rsp *BalanceReply, err error)
	UpdateBalance(ctx context.Context, req *BalanceRequest, opts ...http.CallOption) (rsp *BalanceReply, err error)
}

type BalanceHTTPClientImpl struct {
	cc *http.Client
}

func NewBalanceHTTPClient(client *http.Client) BalanceHTTPClient {
	return &BalanceHTTPClientImpl{client}
}

func (c *BalanceHTTPClientImpl) CreateBalance(ctx context.Context, in *BalanceRequest, opts ...http.CallOption) (*BalanceReply, error) {
	var out BalanceReply
	pattern := "/v1/balance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBalanceCreateBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BalanceHTTPClientImpl) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...http.CallOption) (*BalanceReply, error) {
	var out BalanceReply
	pattern := "/v1/balance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBalanceGetBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BalanceHTTPClientImpl) UpdateBalance(ctx context.Context, in *BalanceRequest, opts ...http.CallOption) (*BalanceReply, error) {
	var out BalanceReply
	pattern := "/v1/balance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBalanceUpdateBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
