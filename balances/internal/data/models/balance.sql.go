// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: balance.sql

package models

import (
	"context"
)

const CreatBalance = `-- name: CreatBalance :one
INSERT INTO balances.balances(owner, name, balance)
VALUES ($1, $2, $3)
RETURNING owner, name, balance, currency, created_time, updated_time
`

type CreatBalanceParams struct {
	Owner   string  `json:"owner"`
	Name    string  `json:"name"`
	Balance float64 `json:"balance"`
}

// CreatBalance
//
//	INSERT INTO balances.balances(owner, name, balance)
//	VALUES ($1, $2, $3)
//	RETURNING owner, name, balance, currency, created_time, updated_time
func (q *Queries) CreatBalance(ctx context.Context, arg CreatBalanceParams) (BalancesBalances, error) {
	row := q.db.QueryRow(ctx, CreatBalance, arg.Owner, arg.Name, arg.Balance)
	var i BalancesBalances
	err := row.Scan(
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const DeleteBalance = `-- name: DeleteBalance :one
DELETE
FROM balances.balances
WHERE id = $1
  AND owner = $2
  AND name = $3
RETURNING owner, name, balance, currency, created_time, updated_time
`

type DeleteBalanceParams struct {
	ID    *int32  `json:"id"`
	Owner *string `json:"owner"`
	Name  *string `json:"name"`
}

// DeleteBalance
//
//	DELETE
//	FROM balances.balances
//	WHERE id = $1
//	  AND owner = $2
//	  AND name = $3
//	RETURNING owner, name, balance, currency, created_time, updated_time
func (q *Queries) DeleteBalance(ctx context.Context, arg DeleteBalanceParams) (BalancesBalances, error) {
	row := q.db.QueryRow(ctx, DeleteBalance, arg.ID, arg.Owner, arg.Name)
	var i BalancesBalances
	err := row.Scan(
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const GetBalance = `-- name: GetBalance :one
SELECT owner, name, balance, currency, created_time, updated_time
FROM balances.balances
WHERE owner = $1
  AND name = $2
`

type GetBalanceParams struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
}

// GetBalance
//
//	SELECT owner, name, balance, currency, created_time, updated_time
//	FROM balances.balances
//	WHERE owner = $1
//	  AND name = $2
func (q *Queries) GetBalance(ctx context.Context, arg GetBalanceParams) (BalancesBalances, error) {
	row := q.db.QueryRow(ctx, GetBalance, arg.Owner, arg.Name)
	var i BalancesBalances
	err := row.Scan(
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const UpdateBalance = `-- name: UpdateBalance :one
UPDATE balances.balances
SET balance = coalesce($1, balance)
WHERE owner = $2
  AND name = $3
RETURNING owner, name, balance, currency, created_time, updated_time
`

type UpdateBalanceParams struct {
	Balance *float64 `json:"balance"`
	Owner   string   `json:"owner"`
	Name    string   `json:"name"`
}

// UpdateBalance
//
//	UPDATE balances.balances
//	SET balance = coalesce($1, balance)
//	WHERE owner = $2
//	  AND name = $3
//	RETURNING owner, name, balance, currency, created_time, updated_time
func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (BalancesBalances, error) {
	row := q.db.QueryRow(ctx, UpdateBalance, arg.Balance, arg.Owner, arg.Name)
	var i BalancesBalances
	err := row.Scan(
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}
