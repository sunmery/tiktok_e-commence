// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: addresses/v1/addresses.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AddressesService_CreateAddresses_FullMethodName = "/api.addresses.v1.AddressesService/CreateAddresses"
	AddressesService_UpdateAddresses_FullMethodName = "/api.addresses.v1.AddressesService/UpdateAddresses"
	AddressesService_DeleteAddresses_FullMethodName = "/api.addresses.v1.AddressesService/DeleteAddresses"
	AddressesService_GetAddresses_FullMethodName    = "/api.addresses.v1.AddressesService/GetAddresses"
)

// AddressesServiceClient is the client API for AddressesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressesServiceClient interface {
	CreateAddresses(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	UpdateAddresses(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	DeleteAddresses(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesReply, error)
	GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesReply, error)
}

type addressesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressesServiceClient(cc grpc.ClientConnInterface) AddressesServiceClient {
	return &addressesServiceClient{cc}
}

func (c *addressesServiceClient) CreateAddresses(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Address)
	err := c.cc.Invoke(ctx, AddressesService_CreateAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesServiceClient) UpdateAddresses(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Address)
	err := c.cc.Invoke(ctx, AddressesService_UpdateAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesServiceClient) DeleteAddresses(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAddressesReply)
	err := c.cc.Invoke(ctx, AddressesService_DeleteAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesServiceClient) GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressesReply)
	err := c.cc.Invoke(ctx, AddressesService_GetAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressesServiceServer is the server API for AddressesService service.
// All implementations must embed UnimplementedAddressesServiceServer
// for forward compatibility.
type AddressesServiceServer interface {
	CreateAddresses(context.Context, *Address) (*Address, error)
	UpdateAddresses(context.Context, *Address) (*Address, error)
	DeleteAddresses(context.Context, *DeleteAddressesRequest) (*DeleteAddressesReply, error)
	GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesReply, error)
	mustEmbedUnimplementedAddressesServiceServer()
}

// UnimplementedAddressesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddressesServiceServer struct{}

func (UnimplementedAddressesServiceServer) CreateAddresses(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddresses not implemented")
}
func (UnimplementedAddressesServiceServer) UpdateAddresses(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddresses not implemented")
}
func (UnimplementedAddressesServiceServer) DeleteAddresses(context.Context, *DeleteAddressesRequest) (*DeleteAddressesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddresses not implemented")
}
func (UnimplementedAddressesServiceServer) GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (UnimplementedAddressesServiceServer) mustEmbedUnimplementedAddressesServiceServer() {}
func (UnimplementedAddressesServiceServer) testEmbeddedByValue()                          {}

// UnsafeAddressesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressesServiceServer will
// result in compilation errors.
type UnsafeAddressesServiceServer interface {
	mustEmbedUnimplementedAddressesServiceServer()
}

func RegisterAddressesServiceServer(s grpc.ServiceRegistrar, srv AddressesServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddressesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddressesService_ServiceDesc, srv)
}

func _AddressesService_CreateAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServiceServer).CreateAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressesService_CreateAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServiceServer).CreateAddresses(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressesService_UpdateAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServiceServer).UpdateAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressesService_UpdateAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServiceServer).UpdateAddresses(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressesService_DeleteAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServiceServer).DeleteAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressesService_DeleteAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServiceServer).DeleteAddresses(ctx, req.(*DeleteAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressesService_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServiceServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressesService_GetAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServiceServer).GetAddresses(ctx, req.(*GetAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressesService_ServiceDesc is the grpc.ServiceDesc for AddressesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.addresses.v1.AddressesService",
	HandlerType: (*AddressesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAddresses",
			Handler:    _AddressesService_CreateAddresses_Handler,
		},
		{
			MethodName: "UpdateAddresses",
			Handler:    _AddressesService_UpdateAddresses_Handler,
		},
		{
			MethodName: "DeleteAddresses",
			Handler:    _AddressesService_DeleteAddresses_Handler,
		},
		{
			MethodName: "GetAddresses",
			Handler:    _AddressesService_GetAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "addresses/v1/addresses.proto",
}
