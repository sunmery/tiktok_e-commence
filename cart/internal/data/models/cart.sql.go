// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package models

import (
	"context"
)

const CreateOrUpdateCartItem = `-- name: CreateOrUpdateCartItem :one
WITH existing_item AS (SELECT id
                       FROM carts.cart_items
                       WHERE owner = $1
                         AND name = $2
                         AND product_id = 1)
INSERT
INTO carts.cart_items (owner, name, product_id, quantity)
VALUES ($1, $2, $3, $4)
ON CONFLICT (owner, name, product_id) DO UPDATE
    SET quantity   = carts.cart_items.quantity + EXCLUDED.quantity,
        updated_at = now()
RETURNING id, owner, name, product_id, quantity, created_at, updated_at
`

type CreateOrUpdateCartItemParams struct {
	Owner     string `json:"Owner"`
	Name      string `json:"Name"`
	ProductID int32  `json:"ProductID"`
	Quantity  int32  `json:"Quantity"`
}

// CreateOrUpdateCartItem
//
//	WITH existing_item AS (SELECT id
//	                       FROM carts.cart_items
//	                       WHERE owner = $1
//	                         AND name = $2
//	                         AND product_id = 1)
//	INSERT
//	INTO carts.cart_items (owner, name, product_id, quantity)
//	VALUES ($1, $2, $3, $4)
//	ON CONFLICT (owner, name, product_id) DO UPDATE
//	    SET quantity   = carts.cart_items.quantity + EXCLUDED.quantity,
//	        updated_at = now()
//	RETURNING id, owner, name, product_id, quantity, created_at, updated_at
func (q *Queries) CreateOrUpdateCartItem(ctx context.Context, arg CreateOrUpdateCartItemParams) (CartsCartItems, error) {
	row := q.db.QueryRow(ctx, CreateOrUpdateCartItem,
		arg.Owner,
		arg.Name,
		arg.ProductID,
		arg.Quantity,
	)
	var i CartsCartItems
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCart = `-- name: DeleteCart :one
DELETE
FROM carts.cart_items
WHERE owner = $1
  AND name = $2
RETURNING id, owner, name, product_id, quantity, created_at, updated_at
`

type DeleteCartParams struct {
	Owner string `json:"Owner"`
	Name  string `json:"Name"`
}

// DeleteCart
//
//	DELETE
//	FROM carts.cart_items
//	WHERE owner = $1
//	  AND name = $2
//	RETURNING id, owner, name, product_id, quantity, created_at, updated_at
func (q *Queries) DeleteCart(ctx context.Context, arg DeleteCartParams) (CartsCartItems, error) {
	row := q.db.QueryRow(ctx, DeleteCart, arg.Owner, arg.Name)
	var i CartsCartItems
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCartItem = `-- name: DeleteCartItem :one
DELETE
FROM carts.cart_items
WHERE owner = $1
  AND name = $2
  AND product_id = $3
RETURNING id, owner, name, product_id, quantity, created_at, updated_at
`

type DeleteCartItemParams struct {
	Owner     string `json:"Owner"`
	Name      string `json:"Name"`
	ProductID int32  `json:"ProductID"`
}

// DeleteCartItem
//
//	DELETE
//	FROM carts.cart_items
//	WHERE owner = $1
//	  AND name = $2
//	  AND product_id = $3
//	RETURNING id, owner, name, product_id, quantity, created_at, updated_at
func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) (CartsCartItems, error) {
	row := q.db.QueryRow(ctx, DeleteCartItem, arg.Owner, arg.Name, arg.ProductID)
	var i CartsCartItems
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCart = `-- name: GetCart :many
SELECT p.description,
       p.price,
       p.picture,
       p.categories,
       ci.product_id,
       ci.quantity
FROM carts.cart_items ci
         INNER JOIN
     products.products p
     ON ci.product_id = p.id
WHERE ci.owner = $1
  AND ci.name = $2
ORDER BY ci.created_at
`

type GetCartParams struct {
	Owner *string `json:"Owner"`
	Name  *string `json:"Name"`
}

type GetCartRow struct {
	Description string   `json:"Description"`
	Price       float32  `json:"Price"`
	Picture     string   `json:"Picture"`
	Categories  []string `json:"Categories"`
	ProductID   int32    `json:"ProductID"`
	Quantity    int32    `json:"Quantity"`
}

// GetCart
//
//	SELECT p.description,
//	       p.price,
//	       p.picture,
//	       p.categories,
//	       ci.product_id,
//	       ci.quantity
//	FROM carts.cart_items ci
//	         INNER JOIN
//	     products.products p
//	     ON ci.product_id = p.id
//	WHERE ci.owner = $1
//	  AND ci.name = $2
//	ORDER BY ci.created_at
func (q *Queries) GetCart(ctx context.Context, arg GetCartParams) ([]GetCartRow, error) {
	rows, err := q.db.Query(ctx, GetCart, arg.Owner, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartRow
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(
			&i.Description,
			&i.Price,
			&i.Picture,
			&i.Categories,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
